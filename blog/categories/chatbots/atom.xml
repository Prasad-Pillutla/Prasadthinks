<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: chatbots, | Prasad Thinks]]></title>
  <link href="http://prasad-pillutla.github.io/Prasadthinks/blog/categories/chatbots/atom.xml" rel="self"/>
  <link href="http://prasad-pillutla.github.io/Prasadthinks/"/>
  <updated>2016-09-08T18:11:51+00:00</updated>
  <id>http://prasad-pillutla.github.io/Prasadthinks/</id>
  <author>
    <name><![CDATA[Prasad]]></name>
    <email><![CDATA[Prasad.pillu@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Chatbots - Integrating with your chat client]]></title>
    <link href="http://prasad-pillutla.github.io/Prasadthinks/blog/2016/09/08/chatbots-integrating-with-your-chat-client/"/>
    <updated>2016-09-08T15:56:22+00:00</updated>
    <id>http://prasad-pillutla.github.io/Prasadthinks/blog/2016/09/08/chatbots-integrating-with-your-chat-client</id>
    <content type="html"><![CDATA[<p>Chatbot, software world’s new celebrity. What is it? As per Wikipedia</p>

<p><em>A <strong>Chatbot</strong> (also known as a <strong>Talkbot</strong>, <strong>Chatterbot</strong>, <strong>Bot</strong>, <strong>Chatterbox</strong>, <strong>Artificial Conversational Entity</strong>) is a computer program designed to simulate an intelligent conversation with one or more human users via auditory or textual methods</em>.</p>

<p>The way I see it (in over simplified statement), it is a <strong>Web Service</strong> powered by Natural Language Processing and, driven by BigData and Machine/Deep Learning.</p>

<p>There are many frameworks available to build a Chatbot and of all, I chose <a href="https://dev.botframework.com/">Microsoft Bot Framework</a> for obvious reasons. There are good number of articles on how to build Chatbot using <a href="https://dev.botframework.com/">Microsoft Bot Framework</a> and deploy it on Azure, which I’ll not repeat.</p>

<p>Once Chatbot is built and deployed, a client application is required using which users can communicate with it. Microsoft, provides Out-of-box integration with Skype and allows Chatbot developers to integrate their Chatbots with Facebook Messenger, WeChat and <a href="https://docs.botframework.com/en-us/csharp/builder/sdkreference/gettingstarted.html#channels">few others</a>.</p>

<p>There are situations when developers want their custom chat clients to interact with Chatbots and integration with custom chat clients is made possible by <a href="https://docs.botframework.com/en-us/restapi/directline/">DirectLine API</a>. Chatbot integration with custom chat clients is a challenge as there is little or no documentation and no samples available for reference. In this article I would using <a href="http://www.telerik.com/fiddler">fiddler</a> to demonstrate Chatbot integration with custom chat clients. Let’s get started</p>

<p><strong>Step 1: Enable DirectLine API</strong>
Login into your <a href="https://dev.botframework.com/">bot dashboard</a> using Microsoft Live ID. Once you register your bot you’ll supported channels.In the list of channels <strong><em>Add Direct Line</em></strong> channel.</p>

<p><img src="/images/enableDirectLine.jpg" alt="" /></p>

<p>When you select Add, a new browser tab will open up where you should <strong>Check</strong> <em>“Enable this bot on Direct Line”</em> option. You should also generate Direct Line Secret by clicking <em>“Generate Direct Line secret button”</em>. Save generated secret for later use.</p>

<p><img src="/images/AddDL.jpg" alt="" /></p>

<p><strong>Step 2: Use Fiddler to communicate with the Chatbot hosted on Azure</strong></p>

<p><strong><em>Step 2.1: Initiate communication with Chatbot</em></strong>
Any custom chat client should start its interaction with Chatbot by posting message to <a href="https://directline.botframework.com/api/conversations"></a>. Header of the POST message should have Authorization parameter, which take Direct Line secret generated in Step 1<br/>
Authorization: BotConnector <strong><em><Direct Line secret></em></strong>
Above request returns with <strong>return code 200</strong> and conversation id, like below</p>

<p><img src="/images/Post%201.jpg" alt="" /></p>

<p><strong>Note</strong> conversationId. This token/conversationId is <strong><em>valid only for 30 minutes</em></strong></p>

<p><strong><em>Step 2.2: POST message to Chatbot</em></strong>
Using the conversationId we can POST any number of messages to Chatbot. All messages to Chatbot will be posted to a new URL, which is <a href="https://directline.botframework.com/api/conversations/&lt;ConversationId>/messages"></a>, in this example the POST request will be sent to</p>

<p><a href="https://directline.botframework.com/api/conversations/Jk21ZkYRQ6a/messages"></a></p>

<pre><code>Request Body will be in the format below
{
"text": “&lt;Your Message&gt;”
}
</code></pre>

<p><img src="/images/Post%202.jpg" alt="" /></p>

<p>Above request doesn’t have a response body and <strong>return Code will be 204</strong>.</p>

<p><img src="/images/Post%201%20response.jpg" alt="" /></p>

<p><strong><em>Step 2.3: Retrieve Chatbot&rsquo;s response for the message sent</em></strong></p>

<p>Above request doesn’t return response from Bot. To view responses from Bot we need to perform a GET request on same URI to which we posted in <em>Step 2.2: POST message to Chatbot</em></p>

<p>GET <a href="https://directline.botframework.com/api/conversations/Jk21ZkYRQ6a/messages"></a></p>

<p>Response from bot is present in “text” field</p>

<p><img src="/images/Get%20Message.jpg" alt="" /></p>
]]></content>
  </entry>
  
</feed>
